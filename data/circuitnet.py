import numpy as np
from torch.utils.data import Dataset
import torch

from scipy.ndimage import gaussian_filter1d
from scipy.signal.windows import triang
from scipy.ndimage import convolve1d

# for congestion data loading efficiency, generate by scripts/count_lds.py for pl
TRAIN_BUCKET_NUM = [2581492, 17149, 41509, 43174, 30339, 34103, 36373, 16562, 26444, 25157, 16077, 19504, 24324, 14210, 14945, 50272, 20398, 133562, 21247, 58371, 107704, 118764, 246384, 81568, 197408, 164580, 367299, 338230, 323874, 614891, 498301, 705948, 866064, 925084, 916282, 1265832, 1251761, 1650988, 1318899, 2342261, 1623725, 1784712, 1851044, 2101910, 2573112, 2532386, 3081342, 2345318, 2810366, 2697930, 3035275, 2756727, 3036616, 2769940, 3439666, 2650078, 2395155, 2587796, 3772054, 3690807, 3535069, 3617550, 3145361, 3602836, 3603838, 3955619, 3368344, 3641182, 3238609, 4168025, 3639133, 3940118, 4113411, 3858332, 4029462, 3758855, 3944048, 3604445, 4008148, 4373663, 4132053, 4745153, 3872252, 4193883, 4302939, 4146266, 3854443, 4302867, 3659075, 4283141, 4227904, 4131651, 4026522, 3813998, 3802860, 4166017, 4754549, 3756769, 4198892, 4852302, 3336808, 4453865, 4117645, 4110658, 3869876, 3858507, 4097277, 4001008, 4271764, 4525024, 3807901, 4153564, 4025843, 4011729, 4620492, 4597749, 4871241, 4135272, 5493407, 4831656, 4286181, 4540263, 4233062, 4941352, 4506741, 3974884, 4318617, 4202539, 3792502, 4444073, 4475465, 4849234, 4505929, 3718776, 4119914, 5023962, 4006894, 4138024, 3595549, 3190685, 3643390, 3522463, 3415693, 3270879, 3265063, 3265904, 3059192, 3006037, 2689766, 3540200, 3200022, 3066402, 2857296, 2400664, 3089188, 2681121, 2920757, 2859823, 2453946, 2584223, 2481059, 1993527, 2080652, 1857478, 2100471, 2227679, 1843444, 1570269, 1545903, 2594179, 2648206, 1505328, 1659068, 1555914, 1251633, 1319450, 1275957, 1096012, 1406018, 1017790, 1131564, 1103892, 1203477, 974773, 774545, 1041176, 1069225, 989386, 956256, 752702, 814265, 713137, 830536, 717171, 673416, 641348, 677930, 610276, 703582, 662650, 595399, 663509, 644617, 536808, 551355, 723515, 525907, 444384, 437081, 429924, 477362, 419360, 450082, 455833, 353762, 480223, 339048, 331852, 325773, 361584, 313321, 388309, 303634, 296717, 292218, 287859, 282119, 278385, 315556, 267902, 263248, 257821, 254147, 249724, 244866, 241026, 237560, 233389, 230312, 228318, 273194, 265990, 216499, 213006, 207992, 204900, 201361, 198349, 195512, 193625, 190216, 237447, 183548, 180730, 178054, 214243, 172899, 169969, 167370, 164359, 161912, 159353, 157049, 153626, 152019, 149567, 147619, 145016, 142688, 140056, 138479, 136086, 134878, 132312, 130043, 127826, 126196, 124814, 123025, 121080, 118452, 117164, 116179, 113965, 111744, 110891, 109231, 107428, 105662, 104450, 103051, 101024, 100012, 98834, 96960, 95889, 94063, 92341, 91653, 89477, 88864, 87385, 86131, 84877, 83501, 82666, 81436, 80088, 79293, 78435, 77271, 75670, 74870, 74422, 72608, 72398, 71148, 70102, 69500, 67939, 67259, 66603, 65836, 64456, 63613, 62659, 62176, 61303, 60065, 59872, 58680, 58186, 57295, 56459, 55465, 55249, 54811, 54035, 52726, 51761, 51874, 50654, 49941, 49984, 48736, 48240, 47756, 46873, 46581, 45450, 45186, 44582, 44606, 43828, 43533, 42620, 42353, 41451, 40751, 40255, 40255, 39527, 39031, 38681, 38135, 37659, 36847, 36598, 36124, 35842, 35158, 35488, 34611, 34102, 33709, 33551, 32905, 32944, 32264, 32104, 31496, 30900, 30839, 30495, 29886, 29925, 29382, 29046, 28641, 28036, 27936, 27787, 27403, 27221, 26666, 26233, 26341, 25649, 25518, 25232, 24915, 24538, 24241, 24251, 23932, 23657, 23175, 23181, 22830, 22343, 22320, 22144, 21921, 21464, 21310, 21091, 20820, 20549, 20334, 20087, 19873, 19756, 19291, 19034, 19043, 18930, 18577, 18581, 18326, 17915, 17654, 17696, 17451, 17024, 17148, 17019, 16633, 16765, 16216, 16445, 15999, 16047, 15680, 15375, 15369, 15455, 15231, 14891, 14742, 14296, 14569, 14165, 14253, 13960, 13828, 13733, 13530, 13531, 13700, 13508, 12986, 12899, 12817, 12704, 12495, 12453, 12248, 12188, 11964, 12006, 11639, 11705, 11621, 11543, 11278, 11159, 11023, 11042, 10800, 10732, 10649, 10477, 10439, 10247, 10305, 10058, 9990, 9990, 9808, 9664, 9631, 9601, 9425, 9457, 9321, 9092, 8967, 9066, 8807, 8886, 8812, 8661, 8397, 8673, 8336, 8332, 8376, 8139, 8054, 7918, 7909, 7918, 7810, 7598, 7742, 7513, 7581, 7426, 7368, 7240, 7040, 7170, 7080, 6951, 6794, 6884, 6763, 6591, 6760, 6675, 6498, 6539, 6323, 6241, 6112, 6242, 6109, 6043, 6065, 6115, 5817, 5871, 5795, 5666, 5789, 5666, 5648, 5521, 5443, 5446, 5456, 5387, 5188, 5182, 5123, 5222, 5107, 5211, 5041, 4839, 4864, 4856, 4686, 4766, 4775, 4578, 4664, 4485, 4501, 4577, 4499, 4442, 4427, 4384, 4271, 4183, 4221, 4057, 4049, 4160, 4008, 4008, 4038, 3945, 3947, 3982, 3839, 3789, 3770, 3727, 3775, 3749, 3615, 3661, 3663, 3475, 3503, 3519, 3519, 3423, 3396, 3233, 3313, 3220, 3230, 3187, 3193, 3242, 3139, 3196, 3089, 3033, 3093, 3035, 2903, 2881, 2904, 2891, 2913, 2942, 2796, 2713, 2755, 2700, 2770, 2710, 2647, 2607, 2693, 2535, 2495, 2499, 2436, 2508, 2511, 2464, 2406, 2403, 2357, 2311, 2419, 2362, 2329, 2298, 2348, 2223, 2242, 2112, 2157, 2124, 2112, 2170, 2110, 2071, 2080, 2112, 2081, 2046, 1983, 1988, 1949, 1967, 1853, 1894, 1969, 1875, 1883, 1845, 1815, 1790, 1796, 1807, 1660, 1625, 1786, 1706, 1679, 1582, 1685, 1652, 1574, 1667, 1563, 1554, 1520, 1518, 1493, 1430, 1489, 1480, 1493, 1475, 1429, 1481, 1452, 1485, 1517, 1382, 1357, 1363, 1421, 1311, 1303, 1340, 1297, 1310, 1305, 1317, 1252, 1257, 1237, 1270, 1298, 1212, 1252, 1252, 1214, 1137, 1198, 1097, 1148, 1085, 1116, 1142, 1077, 1076, 1064, 1059, 1035, 1032, 1036, 976, 978, 1022, 996, 1028, 912, 955, 973, 980, 978, 963, 970, 913, 975, 929, 871, 881, 907, 854, 880, 904, 840, 834, 890, 811, 831, 756, 808, 814, 771, 781, 767, 744, 785, 737, 755, 751, 719, 752, 733, 711, 698, 720, 713, 715, 684, 664, 659, 685, 692, 675, 641, 632, 643, 615, 635, 654, 612, 629, 590, 634, 606, 619, 605, 567, 562, 589, 518, 564, 525, 514, 552, 567, 537, 515, 498, 535, 551, 510, 507, 487, 447, 496, 462, 484, 473, 459, 489, 450, 424, 462, 467, 447, 449, 412, 449, 408, 445, 392, 461, 415, 434, 417, 428, 416, 367, 413, 396, 371, 375, 428, 362, 387, 332, 344, 369, 364, 383, 346, 342, 338, 371, 345, 350, 348, 317, 330, 322, 316, 309, 320, 316, 292, 323, 274, 321, 300, 292, 253, 275, 290, 290, 273, 315, 310, 247, 266, 265, 288, 276, 254, 258, 271, 245, 255, 242, 260, 225, 268, 245, 233, 216, 205, 213, 254, 220, 233, 253, 245, 212, 231, 216, 223, 203, 247, 208, 207, 225, 188, 199, 191, 197, 202, 182, 174, 186, 160, 167, 188, 177, 196, 177, 194, 181, 169, 168, 190, 169, 161, 147, 153, 162, 158, 180, 129, 160, 180, 160, 146, 151, 137, 157, 181, 144, 160, 137, 167, 140, 137, 157, 132, 134, 133, 123, 147, 137, 120, 112, 123, 103, 124, 121, 108, 100, 114, 126, 106, 100, 125, 126, 101, 113, 109, 102, 106, 95, 111, 121, 115, 93, 124, 120, 89, 96, 92, 83, 94, 79, 102, 88, 91, 87, 99, 93, 105, 102, 92, 82, 8434]

# for DRC data loading efficiency, generate by scripts/count_lds.py for pl
# TRAIN_BUCKET_NUM = [489203910, 5829594, 5034669, 4389142, 3996969, 2644150, 1859689, 1674177, 1486121, 1340235, 1149849, 933392, 855582, 775167, 713741, 658904, 553095, 516943, 476259, 444827, 425124, 370521, 352444, 329633, 312971, 306489, 274092, 260973, 248517, 239108, 238240, 214811, 207823, 198347, 192365, 192702, 175817, 171284, 166030, 160967, 163116, 149043, 145594, 141833, 137528, 141084, 129750, 126366, 122932, 120958, 123715, 114157, 111826, 109269, 106640, 110094, 101908, 99921, 98245, 96665, 99770, 91764, 90933, 89056, 86914, 90205, 83575, 82795, 81317, 80249, 82820, 76799, 75968, 74829, 74192, 76752, 71194, 70140, 69504, 69184, 71602, 66464, 66257, 64710, 63990, 66737, 61963, 61090, 60378, 59194, 62209, 57964, 57643, 56669, 56158, 58366, 54271, 54106, 53038, 52822, 55537, 51259, 51210, 50635, 49839, 51911, 48605, 48532, 47884, 47273, 49499, 45856, 45729, 45665, 44951, 47268, 43949, 43572, 42753, 42743, 44622, 41734, 41456, 41000, 41069, 42885, 39150, 39614, 39224, 38870, 40639, 37968, 37655, 37616, 36999, 39174, 36263, 36283, 35591, 35578, 37361, 35481, 34422, 34358, 33974, 35620, 33379, 33225, 32930, 32876, 34339, 32367, 31989, 31379, 31609, 32545, 31123, 30683, 30352, 30440, 31723, 30063, 29458, 29311, 29088, 30862, 28581, 28476, 28418, 28141, 29076, 27536, 27669, 27274, 26857, 28207, 26503, 26498, 26203, 26287, 27578, 25688, 25658, 25474, 25052, 26508, 25050, 24866, 24410, 24488, 25515, 24172, 24054, 23575, 23541, 24546, 23440, 23074, 22484, 22924, 23996, 22209, 22529, 22003, 22138, 22897, 21717, 21431, 21814, 21233, 22326, 21137, 20910, 20762, 20808, 21621, 20187, 20274, 20339, 20039, 21137, 19946, 19674, 19688, 19393, 20418, 19316, 19055, 19180, 18987, 19682, 18764, 18608, 18483, 18281, 19053, 17982, 17785, 17993, 18014, 18821, 17723, 17806, 17516, 17294, 18263, 17271, 16849, 17192, 16889, 18060, 16711, 16501, 16648, 16365, 17402, 16398, 16252, 16030, 16094, 16891, 15895, 15937, 15651, 15626, 16584, 15324, 15328, 15394, 15468, 16196, 15103, 15297, 14858, 14991, 15823, 14914, 14818, 14778, 14636, 15188, 14500, 14319, 14213, 14080, 14960, 14246, 13965, 14034, 13775, 14498, 13796, 13696, 13518, 13517, 14002, 13439, 13469, 13227, 13149, 14005, 13005, 13183, 13148, 13138, 14028, 12812, 12917, 12689, 12639, 13661, 12607, 12848, 12571, 12423, 12922, 12332, 12353, 12116, 12047, 12909, 11915, 12003, 11900, 11996, 12572, 11865, 11749, 11599, 11505, 12442, 11411, 11441, 11679, 11409, 12159, 11106, 11127, 11240, 11161, 11874, 11283, 11062, 10916, 11043, 11421, 10656, 10702, 10879, 10736, 11353, 10830, 10692, 10515, 10498, 11106, 10451, 10565, 10349, 10456, 10768, 10300, 10328, 10071, 10188, 10618, 10102, 9994, 10023, 9747, 10601, 9769, 9888, 9878, 9759, 10397, 9538, 9710, 9745, 9493, 9947, 9549, 9575, 9397, 9653, 10096, 9339, 9415, 9212, 9383, 9695, 9246, 9333, 9061, 9124, 9484, 9036, 8938, 8887, 8736, 9376, 8847, 8694, 8863, 8708, 9152, 8663, 8622, 8606, 8639, 8954, 8431, 8579, 8511, 8288, 9036, 8327, 8138, 8324, 8116, 8810, 8216, 8242, 8117, 8137, 8514, 7997, 8121, 8031, 7960, 8555, 8027, 8102, 7914, 7835, 8394, 7662, 7712, 7856, 7606, 8129, 7506, 7674, 7802, 7748, 7987, 7237, 7604, 7388, 7584, 7795, 7316, 7464, 7290, 7443, 7734, 7169, 7251, 7085, 7296, 7598, 7154, 7081, 6942, 7034, 7443, 6947, 6991, 7010, 6956, 7419, 6908, 6728, 6983, 6821, 7041, 6741, 6748, 6654, 6757, 6988, 6628, 6747, 6615, 6437, 6938, 6590, 6586, 6547, 6489, 6751, 6500, 6478, 6363, 6433, 6842, 6230, 6424, 6354, 6388, 6577, 6161, 6273, 6308, 6173, 6374, 6069, 6018, 6126, 6097, 6419, 6009, 6131, 6002, 5907, 6314, 5772, 5925, 6020, 5891, 6116, 5889, 5942, 5720, 5732, 6124, 5774, 5724, 5624, 5771, 5996, 5569, 5616, 5635, 5381, 5979, 5556, 5606, 5503, 5443, 5875, 5439, 5359, 5399, 5320, 5514, 5426, 5269, 5180, 5327, 5584, 5312, 5062, 5205, 5049, 5488, 5112, 5169, 5082, 5171, 5493, 5130, 4996, 5069, 5083, 5433, 4970, 4918, 4909, 5050, 5358, 4994, 4895, 4861, 4863, 5315, 4911, 4849, 4829, 4833, 5224, 4797, 4772, 4708, 4818, 4945, 4653, 4646, 4591, 4577, 4928, 4643, 4668, 4612, 4637, 4910, 4623, 4618, 4517, 4481, 4762, 4490, 4559, 4373, 4496, 4660, 4273, 4425, 4373, 4409, 4606, 4363, 4296, 4299, 4343, 4435, 4239, 4244, 4330, 4202, 4447, 4227, 4213, 4163, 4051, 4392, 4017, 4147, 4132, 4166, 4204, 4111, 4181, 4142, 3960, 4300, 4046, 4095, 4029, 3965, 4183, 3955, 3978, 3927, 3914, 4108, 3903, 3808, 3856, 3966, 4174, 3833, 3790, 3826, 3729, 4031, 3855, 3845, 3694, 3741, 3942, 3760, 3655, 3737, 3736, 3887, 3598, 3723, 3640, 3726, 3898, 3579, 3675, 3680, 3588, 3781, 3630, 3517, 3604, 3611, 3902, 3524, 3519, 3511, 3550, 3779, 3328, 3368, 3512, 3503, 3587, 3403, 3499, 3413, 3420, 3576, 3221, 3390, 3417, 3388, 3613, 3363, 3286, 3182, 3326, 3428, 3257, 3245, 3289, 3214, 3497, 3304, 3185, 3212, 3201, 3304, 3245, 3128, 3081, 3135, 3384, 3059, 3052, 3118, 3068, 3295, 3024, 3080, 3033, 3071, 3173, 3077, 3018, 3026, 2958, 3235, 2989, 2910, 2932, 3002, 3189, 3005, 2963, 2995, 2994, 3057, 2873, 2907, 2879, 2877, 3072, 3001, 2830, 2900, 2883, 3058, 2790, 2829, 2890, 2849, 3039, 2783, 2848, 2727, 2680, 2968, 2692, 2788, 2746, 2714, 2830, 2692, 2719, 2762, 2686, 2815, 2732, 2687, 2639, 2674, 2744, 2668, 2716, 2707, 2718, 2859, 2585, 2639, 2683, 2551, 2872, 2561, 2603, 2499, 2628, 2605, 2663, 2580, 2568, 2615, 2687, 2544, 2578, 2504, 2539, 2764, 2537, 2457, 2542, 2462, 2623, 2497, 2571, 2428, 2434, 2532, 2455, 2540, 2426, 2438, 2610, 2440, 2431, 2412, 2434, 2561, 2425, 2326, 2475, 2360, 2605, 2292, 2335, 2366, 2329, 2492, 2381, 2421, 2365, 2372, 2429, 2324, 2258, 2410, 2262, 2506, 2270, 2379, 2231, 2193, 2400, 2282, 2351, 2216, 2234, 2374, 2269, 2240, 2176, 2257, 2397, 2259, 2271, 2167, 2233, 2404, 2293, 2241, 2203, 2183, 2270, 2288, 2229, 2225, 2244, 2258, 2099, 2246, 2218, 2189, 2329, 2071, 2195, 2170, 2164, 2328, 2174, 2246, 2178, 2110, 2281, 2152, 2149, 2130, 2179, 2325, 2077, 2145, 2138, 2071, 2206, 2193, 2148, 2078, 2118, 2262, 2224, 2140, 2143, 2135, 2200, 2188, 2184, 2216, 2081, 2178, 2117, 2165, 2150, 2130, 2249, 2144, 2187, 2224, 2137, 2218, 2090, 2107, 2113, 2153, 2170, 2145, 2244, 2045, 2238, 2303, 2141, 2080, 2174, 2168, 2318, 2235, 2242, 2081, 2148, 2311, 2195, 2128, 2273, 2170, 2308, 2154, 2180, 2265, 2321, 2393, 2246, 2313, 2280, 2274, 2372, 2317, 2368, 2234, 2324, 2342, 2419, 2367, 2382, 2385, 2472, 2416, 2407, 2476, 2427, 2696, 2459, 2568, 2499, 2587, 2784, 2711, 2717, 2662, 2721, 2966, 2971, 3018, 3041, 3145, 3325, 3390, 3336, 3528, 3774, 4014, 4330, 4704, 5079, 79749]

def get_lds_kernel_window(kernel, ks, sigma):
    assert kernel in ['gaussian', 'triang', 'laplace']
    half_ks = (ks - 1) // 2
    if kernel == 'gaussian':
        base_kernel = [0.] * half_ks + [1.] + [0.] * half_ks
        kernel_window = gaussian_filter1d(base_kernel, sigma=sigma) / max(gaussian_filter1d(base_kernel, sigma=sigma))
        # kernel = gaussian(ks)
    elif kernel == 'triang':
        kernel_window = triang(ks)
    else:
        laplace = lambda x: np.exp(-abs(x) / sigma) / (2. * sigma)
        kernel_window = list(map(laplace, np.arange(-half_ks, half_ks + 1))) / max(map(laplace, np.arange(-half_ks, half_ks + 1)))

    return kernel_window




class Circuitnet(Dataset):
    def __init__(self, split='train', data_root='trainval', label_root='trainval', loop=1):
        super().__init__()
        self.split,  self.loop = split, loop

        self.data_root = data_root
        self.label_root = label_root

        if split['split'] == 'train':
            self.is_train = True
            self.data_list = []
            f = open("../../../data/train.txt", "r")
            line = f.readline() 
            while line:
                self.data_list.append(line.split(',')[0].split('/')[-1])
                line = f.readline()
            f.close()

        elif split['split'] == 'test':
            self.is_train = False
            self.data_list = []
            f = open("../../../data/test.txt", "r")
            line = f.readline()
            while line:
                self.data_list.append(line.split(',')[0].split('/')[-1])
                line = f.readline() 
            f.close()

        elif split['split'] == 'val':
            self.is_train = False
            self.data_list = []
            f = open("../../../data/val.txt", "r")
            line = f.readline()
            while line:
                self.data_list.append(line.split(',')[0].split('/')[-1])
                line = f.readline()
            f.close()
        self.data_idx = np.arange(len(self.data_list))

        print("Totally {} label in {} set.".format(len(self.data_idx), split))

        self.bucket_weights = self._get_bucket_weights()

    def get_bin_idx(self, x):
        return min(int(x * np.float32(1000)), 1000)

    def _get_bucket_weights(self):
        value_lst = TRAIN_BUCKET_NUM
        lds_kernel = 'gaussian'
        lds_ks = 5
        lds_sigma = 2
        lds_kernel_window = get_lds_kernel_window(lds_kernel, lds_ks, lds_sigma)

        #sqrt_inv
        value_lst = np.sqrt(value_lst)

        smoothed_value = convolve1d(np.asarray(value_lst), weights=lds_kernel_window, mode='reflect')
        smoothed_value = list(smoothed_value)
        scaling = np.sum(TRAIN_BUCKET_NUM) / (np.sum(np.array(TRAIN_BUCKET_NUM) / (np.array(smoothed_value)+1e-7))+1e-7)
        bucket_weights = [np.float32(scaling / smoothed_value[bucket]) for bucket in range(len(TRAIN_BUCKET_NUM))]
        return bucket_weights

    def _get_weights(self, label):
        sp = label.shape
        if self.bucket_weights is not None:
            label = label.view(-1).cpu().numpy()
            assert label.dtype == np.float32
            weights = np.array(list(map(lambda v: self.bucket_weights[min(self.get_bin_idx(v),99)], label)))
            weights = torch.tensor(weights, dtype=torch.float32).view(*sp)
        else:
            weights = torch.tensor([np.float32(1.)], dtype=torch.float32).repeat(*sp)
        return weights

    def __getitem__(self, idx):

        data_idx = self.data_idx[idx % len(self.data_idx)]
        data_path = self.data_root + self.data_list[data_idx]

        data = np.load(data_path[:-4], allow_pickle=True).item()
        data = np.array(list(data.values()))

        label_path = self.label_root + self.data_list[data_idx]
        label_data = np.load(label_path)
        label = label_data

        y1, x1, y2, x2 = data[:,0], data[:,1], data[:,2], data[:,3]
        x1 = torch.FloatTensor(x1)
        y1 = torch.FloatTensor(y1)
        x2 = torch.FloatTensor(x2)
        y2 = torch.FloatTensor(y2)
        label = torch.FloatTensor(label)
        weight = self._get_weights(label)

        return x1, y1, x2, y2, label, weight


    def __len__(self):
        return len(self.data_idx) * self.loop









